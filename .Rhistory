axis.text.y = element_blank(),
axis.ticks.y = element_blank())
grid.arrange(grv2_cu_1, grv2_cu_2, ncol = 2, top = "Run Value on Curveballs by Pitch Movement")
grv2_ch_1 <- Data2 %>%
filter(pitch_type == "CH" | pitch_type == "FS") %>%
ggplot(aes(x = pitcher_break_x, y = rv100,
color = `Stf+ Pitch`)) +
geom_point(alpha = 0.7, show.legend = FALSE, aes(shape = pitch_type_name), size = 2) +
geom_smooth(method = lm, se = FALSE, show.legend = FALSE) +
labs(x = "Horizontal Movement (in.)",
y = "Run Value / 100",
shape = "Pitch Type") +
scale_color_gradient(low = "red", high = "green") +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05)),
trans = "reverse") +
scale_shape_manual(values = c(20, 18)) +
theme_dark() +
theme(plot.subtitle = element_text(hjust = 0.5))
grv2_ch_2 <- Data2 %>%
filter(pitch_type == "CH" | pitch_type == "FS") %>%
ggplot(aes(x = pitcher_break_z, y = rv100,
color = `Stf+ Pitch`)) +
geom_point(alpha = 0.7, aes(shape = pitch_type_name), size = 2) +
geom_smooth(method = lm, se = FALSE) +
labs(x = "Vertical Movement (in.)",
y = "",
color = "Stuff+",
shape = "Pitch Type") +
scale_y_reverse() +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05)),
trans = "reverse") +
scale_shape_manual(values = c(20, 18)) +
scale_color_gradient(low = "red", high = "green") +
theme_dark()+
theme(plot.subtitle = element_text(hjust = 0.5),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.key = element_rect(fill = NA))
grid.arrange(grv2_ch_1, grv2_ch_2, ncol = 2, top = "Run Value on Change-Ups by Pitch Movement")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mgcv)
library(tidymodels)
statcast = read.csv('./Ethan-Data/Statcast/statcast_2020-2022.csv')
pitch_types = c('FF', 'FC', 'CH', 'CU', 'SL', 'SI')
remove_outliers <- function(df, col_names) {
for (col_name in col_names) {
Q1 <- quantile(df[[col_name]], 0.25)
Q3 <- quantile(df[[col_name]], 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df <- df[df[[col_name]] >= lower_bound & df[[col_name]] <= upper_bound, ]
}
return(df)
}
inters = list()
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
rmse <- function(observed, predicted){
n <- length(observed)
sqrt(sum((observed - predicted)^2) / n)}
for (pitch_type in names(inters)) {
set.seed(2004)
split <- inters[[pitch_type]] %>%
distinct(mlbAM_ID) %>%
slice_sample(prop = 0.7)
training <- inters[[pitch_type]] %>%
filter(mlbAM_ID %in% split$mlbAM_ID)
testing <- inters[[pitch_type]] %>%
filter(!mlbAM_ID %in% split$mlbAM_ID)
stfplus_pitch_gam <- gam(est_woba ~ s(Stuff),
data = training,
family = gaussian, method = "REML")
stuff_predictions <- predict(stfplus_pitch_gam, newdata = testing, type = "response")
stuff_gam_pred <- data.frame(observed = testing$est_woba, prediction = stuff_predictions)
print(draw(stfplus_pitch_gam, residuals = TRUE) & ggtitle(pitch_type)
& xlab("Stuff+")
& ylab("xwOBA Partial Effect"))
print(stuff_gam_pred %>%
ggplot(aes(x = observed, y = prediction)) +
geom_point(color = "#FDB827", shape = 18, size = 2.5, alpha = 0.8) +
geom_smooth(se = FALSE, method = lm) +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
scale_x_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
labs(x = "Observed",
y = "Predicted",
title = paste(pitch_type, " xwOBA GAM Predictions"),
caption = paste("RMSE:",
round(rmse(stuff_gam_pred$observed, stuff_gam_pred$prediction), 4))) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)))
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mgcv)
library(tidymodels)
library(gratia)
statcast = read.csv('./Ethan-Data/Statcast/statcast_2020-2022.csv')
pitch_types = c('FF', 'FC', 'CH', 'CU', 'SL', 'SI')
remove_outliers <- function(df, col_names) {
for (col_name in col_names) {
Q1 <- quantile(df[[col_name]], 0.25)
Q3 <- quantile(df[[col_name]], 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df <- df[df[[col_name]] >= lower_bound & df[[col_name]] <= upper_bound, ]
}
return(df)
}
inters = list()
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
rmse <- function(observed, predicted){
n <- length(observed)
sqrt(sum((observed - predicted)^2) / n)}
for (pitch_type in names(inters)) {
set.seed(2004)
split <- inters[[pitch_type]] %>%
distinct(mlbAM_ID) %>%
slice_sample(prop = 0.7)
training <- inters[[pitch_type]] %>%
filter(mlbAM_ID %in% split$mlbAM_ID)
testing <- inters[[pitch_type]] %>%
filter(!mlbAM_ID %in% split$mlbAM_ID)
stfplus_pitch_gam <- gam(est_woba ~ s(Stuff),
data = training,
family = gaussian, method = "REML")
stuff_predictions <- predict(stfplus_pitch_gam, newdata = testing, type = "response")
stuff_gam_pred <- data.frame(observed = testing$est_woba, prediction = stuff_predictions)
print(draw(stfplus_pitch_gam, residuals = TRUE) & ggtitle(pitch_type)
& xlab("Stuff+")
& ylab("xwOBA Partial Effect"))
print(stuff_gam_pred %>%
ggplot(aes(x = observed, y = prediction)) +
geom_point(color = "#FDB827", shape = 18, size = 2.5, alpha = 0.8) +
geom_smooth(se = FALSE, method = lm) +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
scale_x_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
labs(x = "Observed",
y = "Predicted",
title = paste(pitch_type, " xwOBA GAM Predictions"),
caption = paste("RMSE:",
round(rmse(stuff_gam_pred$observed, stuff_gam_pred$prediction), 4))) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)))
}
for (pitch_type in names(inters)) {
set.seed(2004)
split <- inters[[pitch_type]] %>%
distinct(mlbAM_ID) %>%
slice_sample(prop = 0.7)
training <- inters[[pitch_type]] %>%
filter(mlbAM_ID %in% split$mlbAM_ID)
testing <- inters[[pitch_type]] %>%
filter(!mlbAM_ID %in% split$mlbAM_ID)
selected_data <- training[, !(names(training) %in% c("mlbAM_ID", "Year", "player_name",
"pitch_usage", "run_value_per_100", "index"))]
remaining_columns <- setdiff(names(selected_data), c("est_woba"))
rhs <- paste('s(', remaining_columns, ')', sep = '', collapse = ' + ')
fml <- paste('est_woba ~', rhs, collapse = ' ')
big_gam <- gam(as.formula(fml), data = selected_data, family = gaussian, method = "REML")
big_predictions <- predict(big_gam, newdata = testing, type = "response")
big_gam_pred <- data.frame(observed = testing$est_woba, prediction = big_predictions)
print(draw(big_gam, residuals = TRUE) & ggtitle(pitch_type)
& xlab("Stuff+")
& ylab("xwOBA Partial Effect"))
print(big_gam_pred %>%
ggplot(aes(x = observed, y = prediction)) +
geom_point(color = "#FDB827", shape = 18, size = 2.5, alpha = 0.8) +
geom_smooth(se = FALSE, method = lm) +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
scale_x_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
labs(x = "Observed",
y = "Predicted",
title = paste(pitch_type, " xwOBA GAM Predictions"),
caption = paste("RMSE:",
round(rmse(big_gam_pred$observed, big_gam_pred$prediction), 4))) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)))
}
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
inters
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
sqrt(sum((observed - predicted)^2) / n)}
sqrt(sum((observed - predicted)^2) / n)}
rmse <- function(observed, predicted){
n <- length(observed)
sqrt(sum((observed - predicted)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
library(gratia)
library(tidyverse)
library(mgcv)
library(tidymodels)
library(gratia)
```{r}
statcast = read.csv('./Ethan-Data/Statcast/statcast_2020-2022.csv')
pitch_types = c('FF', 'FC', 'CH', 'CU', 'SL', 'SI')
remove_outliers <- function(df, col_names) {
for (col_name in col_names) {
Q1 <- quantile(df[[col_name]], 0.25)
Q3 <- quantile(df[[col_name]], 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df <- df[df[[col_name]] >= lower_bound & df[[col_name]] <= upper_bound, ]
}
return(df)
}
inters = list()
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
rmse <- function(observed, predicted){
n <- length(observed)
sqrt(sum((observed - predicted)^2) / n)
}
statcast = read.csv('./Ethan-Data/Statcast/statcast_2020-2022.csv')
pitch_types = c('FF', 'FC', 'CH', 'CU', 'SL', 'SI')
remove_outliers <- function(df, col_names) {
for (col_name in col_names) {
Q1 <- quantile(df[[col_name]], 0.25)
Q3 <- quantile(df[[col_name]], 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df <- df[df[[col_name]] >= lower_bound & df[[col_name]] <= upper_bound, ]
}
return(df)
}
inters = list()
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
inters
head(inters)
rmse <- function(observed, predicted){
n <- length(observed)
sqrt(sum((observed - predicted)^2) / n)
}
for (pitch_type in names(inters)) {
set.seed(2004)
split <- inters[[pitch_type]] %>%
distinct(mlbAM_ID) %>%
slice_sample(prop = 0.7)
training <- inters[[pitch_type]] %>%
filter(mlbAM_ID %in% split$mlbAM_ID)
testing <- inters[[pitch_type]] %>%
filter(!mlbAM_ID %in% split$mlbAM_ID)
stfplus_pitch_gam <- gam(est_woba ~ s(Stuff),
data = training,
family = gaussian, method = "REML")
stuff_predictions <- predict(stfplus_pitch_gam, newdata = testing, type = "response")
stuff_gam_pred <- data.frame(observed = testing$est_woba, prediction = stuff_predictions)
print(draw(stfplus_pitch_gam, residuals = TRUE) & ggtitle(pitch_type)
& xlab("Stuff+")
& ylab("xwOBA Partial Effect"))
print(stuff_gam_pred %>%
ggplot(aes(x = observed, y = prediction)) +
geom_point(color = "#FDB827", shape = 18, size = 2.5, alpha = 0.8) +
geom_smooth(se = FALSE, method = lm) +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
scale_x_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
labs(x = "Observed",
y = "Predicted",
title = paste(pitch_type, " xwOBA GAM Predictions"),
caption = paste("RMSE:",
round(rmse(stuff_gam_pred$observed, stuff_gam_pred$prediction), 4))) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)))
}
for (pitch_type in names(inters)) {
set.seed(2004)
split <- inters[[pitch_type]] %>%
distinct(mlbAM_ID) %>%
slice_sample(prop = 0.7)
training <- inters[[pitch_type]] %>%
filter(mlbAM_ID %in% split$mlbAM_ID)
testing <- inters[[pitch_type]] %>%
filter(!mlbAM_ID %in% split$mlbAM_ID)
stfplus_pitch_gam <- gam(est_woba ~ s(Stuff),
data = training,
family = gaussian, method = "REML")
stuff_predictions <- predict(stfplus_pitch_gam, newdata = testing, type = "response")
stuff_gam_pred <- data.frame(observed = testing$est_woba, prediction = stuff_predictions)
print(draw(stfplus_pitch_gam, residuals = TRUE) & ggtitle(pitch_type)
& xlab("Stuff+")
& ylab("xwOBA Partial Effect"))
print(stuff_gam_pred %>%
ggplot(aes(x = observed, y = prediction)) +
geom_point(color = "#FDB827", shape = 18, size = 2.5, alpha = 0.8) +
geom_smooth(se = FALSE, method = lm) +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
scale_x_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
labs(x = "Observed",
y = "Predicted",
title = paste(pitch_type_name, " xwOBA GAM Predictions"),
caption = paste("RMSE:",
round(rmse(stuff_gam_pred$observed, stuff_gam_pred$prediction), 4))) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)))
}
for (pitch_type in names(inters)) {
set.seed(2004)
split <- inters[[pitch_type]] %>%
distinct(mlbAM_ID) %>%
slice_sample(prop = 0.7)
training <- inters[[pitch_type]] %>%
filter(mlbAM_ID %in% split$mlbAM_ID)
testing <- inters[[pitch_type]] %>%
filter(!mlbAM_ID %in% split$mlbAM_ID)
stfplus_pitch_gam <- gam(est_woba ~ s(Stuff),
data = training,
family = gaussian, method = "REML")
stuff_predictions <- predict(stfplus_pitch_gam, newdata = testing, type = "response")
stuff_gam_pred <- data.frame(observed = testing$est_woba, prediction = stuff_predictions)
print(draw(stfplus_pitch_gam, residuals = TRUE) & ggtitle(pitch_type)
& xlab("Stuff+")
& ylab("xwOBA Partial Effect"))
print(stuff_gam_pred %>%
ggplot(aes(x = observed, y = prediction)) +
geom_point(color = "#FDB827", shape = 18, size = 2.5, alpha = 0.8) +
geom_smooth(se = FALSE, method = lm) +
scale_y_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
scale_x_continuous(labels = scales::comma_format(accuracy = 0.001),
expand = expansion(mult = c(0, 0.05))) +
labs(x = "Observed",
y = "Predicted",
title = paste(pitch_type, " xwOBA GAM Predictions"),
caption = paste("RMSE:",
round(rmse(stuff_gam_pred$observed, stuff_gam_pred$prediction), 4))) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)))
}
names(inters)
inters
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
rmse <- function(observed, predicted){
n <- length(observed)
sqrt(sum((observed - predicted)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
# code for scatterplots per pitch of woba versus stuff plus:
library(tidyverse)
library(mgcv)
library(gratia)
group_by_pitch <- Data2 %>%
rename("stfpluspitch" = "Stf+ Pitch") %>%
group_by(pitch_type)
list_of_pitch_types <- group_split(group_by_pitch)
for(pitch in list_of_pitch_types){
print(paste(pitch$pitch_type_name[1], "xwOBA: ", mean(pitch$est_woba)))
}
for(pitch in list_of_pitch_types){
model <- lm(est_woba ~ stfpluspitch, data = pitch)
r_squared <- summary(model)$r.squared
plot <- pitch %>%
ggplot(aes(x = stfpluspitch, y = est_woba)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add linear regression line+
labs(title = paste(pitch$pitch_type_name[1], ": xwOBA vs. Stuff Plus", sep = ""), x = "Stuff Plus",
y = "xwOBA") +
annotate("text", x = 120, y = 0.48,
label = paste0("R-squared = ", round(r_squared, 2)))
print(plot)
}
# below, list_of_pitch_types is a LIST of DATA FRAMES
# so pitch is a DATA FRAME containing only that specific pitch type
for(pitch in list_of_pitch_types){
set.seed(2004)
split <- pitch %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
training <- pitch %>%
filter(pitcher_id %in% split$pitcher_id)
testing <- pitch %>%
filter(!pitcher_id %in% split$pitcher_id)
stfplus_pitch_gam <- gam(est_woba ~ s(stfpluspitch),
data = training,
family = gaussian, method = "REML")
print(draw(stfplus_pitch_gam, residuals = TRUE) & ggtitle(pitch$pitch_type_name[1]) & xlab("Stuff+") &
ylab("xwOBA Partial Effect"))
print(summary(stfplus_pitch_gam))
}
# also want to do partial effects plots maybe for velo / break / spin rate
# above, speed differential should be factored in the interpitch dynamics
# took out whiff and put out from above
#
# testing_here <- testing_here %>%
#   mutate(Prediction = predict(sliders_gam, testing_here))
#
# testing_here %>%
#   ggplot(aes(x = Prediction, y = est_woba)) +
#   geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
#   geom_point()
#
# testing_here %>%
#   filter(!is.na(est_woba), !is.na(Prediction)) %>%
#   with(cor(est_woba, Prediction))
for(pitch_x in list_of_pitch_types){
set.seed(2004)
pitch_x <- pitch_x %>%
mutate(difference_x = pitcher_break_x - abs(league_break_x)) %>%
mutate(difference_z = pitcher_break_z - abs(league_break_z))
split_two <- pitch_x %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
training_two <- pitch_x %>%
filter(pitcher_id %in% split_two$pitcher_id)
testing_two <- pitch_x %>%
filter(!pitcher_id %in% split_two$pitcher_id)
stfplus_pitch_gam_two <- gam(est_woba ~ s(avg_speed) + s(spin_rate) + s(difference_x) +
s(difference_z),
data = training_two,
family = gaussian, method = "REML")
print(draw(stfplus_pitch_gam_two, residuals = TRUE) & xlab(pitch_x$pitch_type_name[1]) & ylab("xwOBA Partial Effect"))
print(summary(stfplus_pitch_gam_two))
}
# TO DO THURSDAY: MAYBE REVERSE THE AXES ON XWOBA SO GOING UP IS GOOD AND GOING DOWN IS BAD, LIKE EVAN DID
# use geom_smooth
for(n in list_of_pitch_types){
set.seed(2004)
speed <- ggplot(data = n, aes(x = avg_speed, y = est_woba)) +
geom_point() +
geom_smooth() +
ggtitle(n$pitch_type_name[1])
spin <- ggplot(data = n, aes(x = spin_rate, y = est_woba)) +
geom_point() +
geom_smooth() +
ggtitle(n$pitch_type_name[1])
x_break <- ggplot(data = n, aes(x = pitcher_break_x, y = est_woba)) +
geom_point() +
geom_smooth() +
ggtitle(n$pitch_type_name[1])
z_break <- ggplot(data = n, aes(x = pitcher_break_z, y = est_woba)) +
geom_point() +
geom_smooth() +
ggtitle(n$pitch_type_name[1])
print(speed)
print(spin)
print(x_break)
print(z_break)
}
for(pitch_z in list_of_pitch_types){
set.seed(2004)
pitch_z <- pitch_z %>%
mutate(difference_x = pitcher_break_x - abs(league_break_x)) %>%
mutate(difference_z = pitcher_break_z - abs(league_break_z))
split_tw <- pitch_z %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
training_tw <- pitch_z %>%
filter(pitcher_id %in% split_tw$pitcher_id)
testing_tw <- pitch_z %>%
filter(!pitcher_id %in% split_tw$pitcher_id)
stfplus_pitch_gam_tw <- gam(est_woba ~ s(stfpluspitch) + s(speed_diff),
data = training_tw,
family = gaussian, method = "REML")
print(draw(stfplus_pitch_gam_tw, residuals = TRUE) & xlab(pitch_z$pitch_type_name[1]) & ylab("xwOBA Partial Effect"))
print(summary(stfplus_pitch_gam_tw))
}
for (pitch_type in pitch_types) {
file_path = sprintf('./Ethan-Data/Inter-Pitch/%s_interpitch_2020-2022.csv', pitch_type)
df <- read.csv(file_path)
df <- remove_outliers(df, col_names = c('est_woba', 'Stuff'))
inters[[pitch_type]] <- df
}
inters

head(select(nba_stats, player:games))
# Uncomment the following lines of code
head(select(nba_stats, starts_with("three")))
# INSERT CODE HERE
filter(nba_stats, assists > 500)
# INSERT CODE HERE
filter(nba_stats, age > 30, team %in% c("HOU", "GSW"))
# INSERT CODE HERE
arrange(nba_stats, personal_fouls)
# INSERT CODE HERE
arrange(nba_stats, desc(personal_fouls))
# INSERT CODE HERE
nba_stats %>%
select(player, team, age, games) %>%
filter(games > 50) %>%
arrange(desc(age))
nba_stats <- nba_stats %>%
mutate(fouls_per_game = personal_fouls / games)
head(nba_stats)
nba_stats <- nba_stats %>%
mutate(fouls_per_game = personal_fouls / games)
# INSERT CODE HERE
summarize(assists)
# INSERT CODE HERE
summarize(nba_stats, assists)
# INSERT CODE HERE
summarize(nba_stats, mean(assists))
# INSERT CODE HERE
summarize(nba_stats, mean(assists), min(assists), max(assists))
# INSERT CODE HERE
summarize(nba_stats, mean(assists), min(assists), max(assists))
nba_stats %>%
group_by(position)
# INSERT CODE HERE
nba_stats %>%
group_by(position) %>%
summarize(mean(assists), min(assists), max(assists))
knitr::opts_chunk$set(echo = TRUE)
head(hospitals, 2)
head(hospitals, 2)
head(hospitals, 2)
hospitals <- hospitals %>%
filter(STATUS == "OPEN") %>%
select(-c(X, Y, OBJECTID, ID, ZIP4, TELEPHONE, NAICS_CODE, NAICS_DESC, SOURCE,
SOURCEDATE, VAL_METHOD, VAL_DATE, WEBSITE, ALT_NAME, TTL_STAFF))
knitr::opts_chunk$set(echo = TRUE)
hospitals <- hospitals %>%
filter(STATUS == "OPEN") %>%
select(-c(X, Y, OBJECTID, ID, ZIP4, TELEPHONE, NAICS_CODE, NAICS_DESC, SOURCE,
SOURCEDATE, VAL_METHOD, VAL_DATE, WEBSITE, ALT_NAME, TTL_STAFF))
library(dplyr)
hospitals <- read_csv("https://shorturl.at/hiLR5", na = c("","NA","-999"))
hospitals <- read_csv("https://shorturl.at/hiLR5", na = c("","NA","-999"))
hospitals <- read_csv("https://shorturl.at/hiLR5", na = c("","NA","-999"))
hospitals <- read_csv("https://shorturl.at/hiLR5", na = c("","NA","-999"))
head(hospitals)
# HEALTH
heart_disease <- read_csv("./files/heart_disease.csv")
knitr::opts_chunk$set(echo = TRUE)
source("Data.R")
# Want to have a visualization of baseline pitch and batted ball outcome
head(results)
knitr::opts_chunk$set(echo = TRUE)
source("Data.R")
knitr::opts_chunk$set(echo = TRUE)
source("Data.R")
# library("rgl")
# rgl.open()
# rgl.init()
#
# get_colors <- function(groups, group.col = palette()){
#   groups <- as.factor(groups)
#   ngrps <- length(levels(groups))
#   if(ngrps > length(group.col))
#     group.col <- rep(group.col, ngrps)
#   color <- group.col[as.numeric(groups)]
#   names(color) <- as.vector(groups)
#   return(color)
# }
#
#
#
# Pitch <- filter(Data, pitch_type_name == "Slider")
# color_palette <- colorRampPalette(c("white", "red"))(Pitch$`Stf+ Pitch`)
# # Pitch <- mutate(Data, pristuff = )
#
# # rgl.spheres(Data$pitcher_break_x, Data$pitcher_break_z, Data$avg_speed, r = 0.2,
#          #  color = get_colors(Data$pitch_type))  # Scatter plot
#
# rgl.spheres(Pitch$pitcher_break_x, Pitch$pitcher_break_z, Pitch$rise, r = 0.2,
#             color = color_palette)  # Scatter plot
# rgl.bbox(color = "#333377")
#
# rm(Pitch)
pitch_names <- unique(Data$pitch_type_name) %>%
as.matrix()
# Want to have a visualization of baseline pitch and batted ball outcome
head(results)
install.packages("rvest")
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
nhl_url <- "https://www.hockey-reference.com/leaders/games_played_career.html"
nhl_url %>%
read_html() %>%
html_element(css = "#stats_career_NHL") %>%
html_table()
nhl_tbl <- nhl_url %>%
read_html() %>%
html_element(css = "#stats_career_NHL") %>%
html_table()
nhl_tbl
nhl_tbl %>%
mutate(HOF = ifelse(str_detect(Player, "\\*"), 1, 0))
library(rvest)
library(tidyverse)
nhl_tbl %>%
mutate(HOF = ifelse(str_detect(Player, "\\*"), 1, 0))
nhl_tbl %>%
mutate(HOF = ifelse(str_detect(Player, "\\*"), 1, 0),
Player = str_remove(Player, "\\*")
)
nhl_tbl %>%
mutate(HOF = ifelse(str_detect(Player, "\\*"), 1, 0),
Player = str_remove(Player, "\\*")
Rank = str_remove(Rank, "\\.")
nhl_tbl %>%
mutate(HOF = ifelse(str_detect(Player, "\\*"), 1, 0),
Player = str_remove(Player, "\\*")
Rank = str_remove(Rank, "\\.")
nhl_tbl %>%
mutate(HOF = ifelse(str_detect(Player, "\\*"), 1, 0),
Player = str_remove(Player, "\\*"),
Rank = str_remove(Rank, "\\.")
)
fb_url <- "https://fbref.com/en/comps/183/2017-2018/2017-2018-Frauen-Bundesliga-Stats"
fb_url %>%
read_html() %>%
html_element(css = "#results2017-20181832_overall")
fb_url %>%
read_html() %>%
html_table()
fb_node <- fb_url %>%
read_html() %>%
html_table()
fb_node %>%
html_element("img")
fb_node %>%
html_element("img") %>%
html_attr("src")
View(fb_node)
wimbledon_url <- "https://en.wikipedia.org/wiki/2009_Wimbledon_Championships_-_Women's_singles"
wimbledon_url %>%
read_html() %>%
html_element(css = "#mw-content-text > div.mw-parser-output > div:nth-child(13) > dl:nth-child(1)")
wimbledon_url %>%
read_html() %>%
html_element(css = "#mw-content-text > div.mw-parser-output > div:nth-child(13) > dl:nth-child(1)") %>%
html_text2() %>%
str_split("\\n")
wimbledon_url %>%
read_html() %>%
html_element(css = "#mw-content-text > div.mw-parser-output >
div:nth-child(13) > dl:nth-child(1)") %>%
html_text2() %>%
str_split_1("\\n")
# Install the RSQLite packages and the NYC flights data ----
REQ_PKGS <- c("dittodb", "RSQLite", "nycflights13")
install.packages(REQ_PKGS)
# pak::pkg_install(REQ_PKGS)
# Load the required packages ----
library(RSQLite)
library(nycflights13)
library(dittodb)
library(tidyverse)
# Set up the connection to the NYC flights database ----
NYC_CONN <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
# Reads the database from the NYC data ----
dittodb::nycflights13_create_sql(NYC_CONN)
# Helper function to read from a given connection ----
# This removes a lot of the DBI::dbGetQuery code, and allows us to just focus
# directly on the SQL query
fetch_query <- function(query, con = NYC_CONN) {
return(DBI::dbGetQuery(con, query))
}
# We can now run some custom queries on the NYC flights data ----
fetch_query("SELECT * FROM flights LIMIT 10;")
fetch_query("SELECT * FROM weather LIMIT 10;")
fetch_query("SELECT dep_time, arr_time, flight FROM flights LIMIT 10;")
fetch_query("SELECT flight, distance/(air_time/60) AS speed FROM flights LIMIT 10;")
fetch_query("SELECT MIN(air_time) AS min_ar, MAX(air_time) AS max_ar from flights;")
setwd("~/cmsac/finalproject/CoastersPlus")
knitr::opts_chunk$set(echo = TRUE)
source("Data.R")
library(tidyverse)
library(readxl)
library(patchwork)
library(kableExtra)
library(knitr)
library(ranger)
library(vip)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
View(Data2)
install.packages("mgcv")
knitr::opts_chunk$set(echo = TRUE)
source("Data.R")
Data2 <- Data2 %>%
mutate(is_train = sample(rep(0:1, length.out = nrow(Data2))))
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed),
data = filter(Data2, is_train == 1),
family = binomial, method = "REML")
library(mgcv)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed),
data = filter(Data2, is_train == 1),
family = binomial, method = "REML")
library(mgcv)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(pitcher_break_x) + s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
install.packages("gratia")
library(gratia)
draw(init_logit_gam)
summary(init_logit_gam)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + 0.1 * s(avg_speed) + s(speed_diff) +
s(pitcher_break_x) + s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(pitcher_break_x) + s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
init_logit_gam <- gam(rv100 ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
init_logit_gam <- gam(woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
training <- Data2 %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
test_two <- Data2 %>%
filter(pitcher_id %in% training$pitcher_id)
test_three <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
yes <- Data2 %>%
filter(pitcher_id %in% training$pitcher_id)
no <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
# Some testing n whatnot
training <- Data2 %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
yes <- Data2 %>%
filter(pitcher_id %in% training$pitcher_id)
no <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
no <- no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point()
no
bye <- no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point()
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point()
View(yes)
?predict
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point()
View(hi)
no %>% ggplot(aes(x = est_woba, y = Prediction)) +
geom_point()
no <- no %>%
mutate(Prediction = predict(hi, no))
no <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point()
?geom_abline
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green")
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point() +
NULL
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no %>%
mutate(Prediction = predict(hi, no)) %>%
with(cor(est_woba, Prediction))
no %>%
mutate(Prediction = predict(hi, no)) %>%
with(cor(est_woba, Prediction))
no %>%
mutate(Prediction = predict(hi, no)) %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no %>%
mutate(Prediction = predict(hi, no)) %>%
with(cor(est_woba, Prediction))
no %>%
with(cor(est_woba, Prediction))
no <- no %>%
mutate(Prediction = predict(hi, no))
no %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no %>%
with(cor(est_woba, Prediction))
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
---
title: "PRI's stuff in 3d"
# Some testing n whatnot
training <- Data2 %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
yes <- Data2 %>%
filter(pitcher_id %in% training$pitcher_id)
no <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
no <- no %>%
mutate(Prediction = predict(hi, no))
no <- no %>%
mutate(Prediction = predict(hi, no))
no %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
```{r}
set.seed(2004)
Data2 <- Data2 %>%
mutate(is_train = sample(rep(0:1, length.out = nrow(Data2))))
library(mgcv)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
# Some testing n whatnot
training <- Data2 %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
yes <- Data2 %>%
filter(pitcher_id %in% training$pitcher_id)
no <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
no <- no %>%
mutate(Prediction = predict(hi, no))
no <- no %>%
mutate(Prediction = predict(hi, no))
no %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
set.seed(2004)
Data2 <- Data2 %>%
mutate(is_train = sample(rep(0:1, length.out = nrow(Data2))))
library(mgcv)
init_logit_gam <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate),
data = filter(Data2, is_train == 1),
family = gaussian, method = "REML")
summary(init_logit_gam)
library(gratia)
draw(init_logit_gam)
```{r}
# Some testing n whatnot
training <- Data2 %>%
distinct(pitcher_id) %>%
slice_sample(prop = 0.7)
yes <- Data2 %>%
filter(pitcher_id %in% training$pitcher_id)
no <- Data2 %>%
filter(!pitcher_id %in% training$pitcher_id)
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
hi <- gam(est_woba ~ s(pitcher_break_z) + s(avg_speed) + s(speed_diff) +
s(spin_rate) + s(whiff_percent) + s(put_away),
data = yes,
family = gaussian, method = "REML")
no <- no %>%
mutate(Prediction = predict(hi, no))
no <- no %>%
mutate(Prediction = predict(hi, no))
no %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no <- no %>%
mutate(Prediction = predict(hi, no))
no %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
summary(init_model)
summary(init_logit_gam)
no %>%
filter(!is.na(est_woba), !is.na(Prediction)) %>%
with(cor(est_woba, Prediction))
no %>%
ggplot(aes(x = est_woba, y = Prediction)) +
geom_abline(slope = 1, intercept = 0, size = 2, color = "green") +
geom_point()
